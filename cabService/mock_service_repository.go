// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package cabService is a generated GoMock package.
package cabService

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proto "github.com/serinth/cab-data-researcher/proto"
	reflect "reflect"
	time "time"
)

// MockCabService is a mock of CabService interface
type MockCabService struct {
	ctrl     *gomock.Controller
	recorder *MockCabServiceMockRecorder
}

// MockCabServiceMockRecorder is the mock recorder for MockCabService
type MockCabServiceMockRecorder struct {
	mock *MockCabService
}

// NewMockCabService creates a new mock instance
func NewMockCabService(ctrl *gomock.Controller) *MockCabService {
	mock := &MockCabService{ctrl: ctrl}
	mock.recorder = &MockCabServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCabService) EXPECT() *MockCabServiceMockRecorder {
	return m.recorder
}

// GetCabTrips mocks base method
func (m *MockCabService) GetCabTrips(ctx context.Context, medallionIds []string, date time.Time) ([]*proto.CabTripCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCabTrips", ctx, medallionIds, date)
	ret0, _ := ret[0].([]*proto.CabTripCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCabTrips indicates an expected call of GetCabTrips
func (mr *MockCabServiceMockRecorder) GetCabTrips(ctx, medallionIds, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCabTrips", reflect.TypeOf((*MockCabService)(nil).GetCabTrips), ctx, medallionIds, date)
}
